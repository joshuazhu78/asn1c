////////////////////// moduletestclass.proto //////////////////////
// Protobuf generated from /18c-class-OK.asn1 by asn1c-0.9.29
// ModuleTestClass { iso org(3) dod(6) internet(1) private(4) enterprise(1) spelio(9363) software(1) asn1c(5) test(1) 18 }

syntax = "proto3";

package pkg18c_class_ok.v1;
option go_package = "pkg18c_class_ok/v1/moduletestclass;moduletestclass";

import "validate/v1/validate.proto";
import "asn1/v1/asn1.proto";

// enumerated from 18c-class-OK.asn1:65
enum Criticality {
    CRITICALITY_HIGH = 0;
    CRITICALITY_LOW = 1;
};

// enumerated from 18c-class-OK.asn1:71
enum Presence {
    PRESENCE_OPTIONAL = 0;
    PRESENCE_MANDATORY = 1;
};

// concrete instance(s) of class FUNCTION from 18c-class-OK.asn1:22
// {operator1}
message Operator1 {
    CodeId code = 1 [ json_name="&code"];
    // @inject_tag: aper:"valueExt,"
    Type1 arg_type = 2 [ json_name="&ArgType"];
    // @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:1,"
    Presence presence = 3 [ json_name="&presence"];
    // @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
    Criticality criticality = 4 [ json_name="&criticality"];
};

// concrete instance(s) of class FUNCTION from 18c-class-OK.asn1:29
// {operator2}
message Operator2 {
    CodeId code = 1 [ json_name="&code"];
    // @inject_tag: aper:"choiceExt,"
    Type2 arg_type = 2 [ json_name="&ArgType"];
    // @inject_tag: aper:"optional,valueExt,valueLB:0,valueUB:1,"
    Presence presence = 3 [ json_name="&presence"];
    // @inject_tag: aper:"valueExt,valueLB:0,valueUB:1,"
    Criticality criticality = 4 [ json_name="&criticality"];
};

// sequence from 18c-class-OK.asn1:37
// @inject_tag: aper:"valueExt"
// {Type1}
message Type1 {
    float se1 = 1 [ json_name="se1"];
    // @inject_tag: aper:"optional,"
    optional bytes se2 = 2 [ json_name="se2"];
};

// sequence from 18c-class-OK.asn1:43
// @inject_tag: aper:"choiceExt"
// {Type2}
message Type2 {
    // choice from 18c-class-OK.asn1:43
    oneof type2 {
        // @inject_tag: aper:"choiceIdx:1,"
        int32 ch1 = 1 [ json_name="ch1"];
        // @inject_tag: aper:"choiceIdx:2,"
        asn1.v1.BitString ch2 = 2 [ json_name="ch2"];
    }
};

// range of Integer from 18c-class-OK.asn1:62
// {CodeID}
message CodeId {
    // @inject_tag: aper:"valueExt,valueLB:0,valueUB:128,"
    int32 value = 1 [(validate.v1.rules).int32 = {gte: 0, lte: 128}, json_name="value"];
};

// reference from 18c-class-OK.asn1:76
// {id-operator1}
message Idoperator1 {
    // @inject_tag: aper:"valueLB:1,valueUB:1,"
    int32 value = 1 [(validate.v1.rules).int32.const = 1, json_name="value"]; // CodeID
};

// reference from 18c-class-OK.asn1:77
// {id-operator2}
message Idoperator2 {
    // @inject_tag: aper:"valueLB:2,valueUB:2,"
    int32 value = 1 [(validate.v1.rules).int32.const = 2, json_name="value"]; // CodeID
};

// reference from 18c-class-OK.asn1:78
// {id-valueSet1}
message IdvalueSet1 {
    // @inject_tag: aper:"valueLB:21,valueUB:21,"
    int32 value = 1 [(validate.v1.rules).int32.const = 21, json_name="value"]; // CodeID
};

// reference from 18c-class-OK.asn1:79
// {id-valueSet2}
message IdvalueSet2 {
    // @inject_tag: aper:"valueLB:22,valueUB:22,"
    int32 value = 1 [(validate.v1.rules).int32.const = 22, json_name="value"]; // CodeID
};

