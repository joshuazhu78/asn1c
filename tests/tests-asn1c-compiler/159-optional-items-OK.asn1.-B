////////////////////// moduletestconstraints1.proto //////////////////////
// Protobuf generated from /159-optional-items-OK.asn1 by asn1c-0.9.29
// ModuleTestConstraints1 { iso org(3) dod(6) internet(1) private(4) enterprise(1) spelio(9363) software(1) asn1c(5) test(1) 159 }

syntax = "proto3";

package pkg159_optional_items_ok.v1;
option go_package = "pkg159_optional_items_ok/v1/moduletestconstraints1;moduletestconstraints1";

import "validate/v1/validate.proto";
import "asn1/v1/asn1.proto";
import "google/protobuf/empty.proto";

// sequence from 159-optional-items-OK.asn1:15
// @inject_tag: aper:"valueExt"
// {PDU}
message Pdu {
    // @inject_tag: aper:"optional,sizeLB:1,sizeUB:123456,"
    repeated ConstrainedString element_list = 1 [(validate.v1.rules).repeated = {min_items: 1, max_items: 123456}, json_name="element-List"];
    // @inject_tag: aper:"optional,sizeExt,sizeLB:1,sizeUB:150,"
    optional string constrained_string = 2 [(validate.v1.rules).string = {min_len: 1, max_len: 150}, json_name="constrainedString"];
    // @inject_tag: aper:"optional,sizeLB:22,sizeUB:32,"
    optional asn1.v1.BitString id = 3 [ json_name="id"];
    // @inject_tag: aper:"valueLB:-100,valueUB:123456,"
    int32 interval = 4 [ json_name="interval"];
    // @inject_tag: aper:"optional,"
    optional OtherIdentity other_id = 5 [ json_name="other-ID"];
};

// range of Integer from 159-optional-items-OK.asn1:23
// {ConstrainedString}
message ConstrainedString {
    // @inject_tag: aper:"sizeExt,sizeLB:1,sizeUB:1000,"
    string value = 1 [(validate.v1.rules).string = {min_len: 1, max_len: 1000}, json_name="value"];
};

// range of Integer from 159-optional-items-OK.asn1:25
// {OtherIdentity}
message OtherIdentity {
    // @inject_tag: aper:"sizeLB:3,sizeUB:3,"
    bytes value = 1 [(validate.v1.rules).bytes = {min_len: 3, max_len: 3}, json_name="value"];
};

// constant Integer from 159-optional-items-OK.asn1:27
// {-}
message Int123456 {
    // @inject_tag: aper:"valueLB:123456,valueUB:123456,"
    int32 value = 1 [(validate.v1.rules).int32.const = 123456, json_name="value"];
};

